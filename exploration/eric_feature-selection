{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X_train shape: (7848, 142)\n",
      "X_test shape: (3364, 142)\n",
      "y_train shape: (7848,)\n",
      "y_test shape: (3364,)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/ehelander/anaconda3/lib/python3.6/site-packages/sklearn/utils/validation.py:475: DataConversionWarning: Data with input dtype int64 was converted to float64 by StandardScaler.\n",
      "  warnings.warn(msg, DataConversionWarning)\n"
     ]
    }
   ],
   "source": [
    "FILE_PATH = '../atus/ehresp_2014.xlsx'\n",
    "\n",
    "# Import libraries\n",
    "import pandas as pd\n",
    "\n",
    "# Load the ehresp_2014 DataFrame\n",
    "ehresp_2014 = pd.read_excel(FILE_PATH)\n",
    "\n",
    "from enum import Enum\n",
    "class COLUMN_TYPES(Enum):\n",
    "    NUMERICAL = 'numerical',\n",
    "    CATEGORICAL = 'categorical'\n",
    "\n",
    "numerical_columns = ['ertpreat', \\\n",
    "                     'ertseat', \\\n",
    "                     'euexfreq', \\\n",
    "                     'eufastfdfrq', \\\n",
    "                     'euhgt', \\\n",
    "                     'euwgt']\n",
    "\n",
    "categorical_columns = ['eeincome1', \\\n",
    "                       'erhhch', \\\n",
    "                       'erincome', \\\n",
    "                       'erspemch', \\\n",
    "                       'ethgt', \\\n",
    "                       'etwgt', \\\n",
    "                       'eudietsoda', \\\n",
    "                       'eudrink', \\\n",
    "                       'eueat', \\\n",
    "                       'euexercise', \\\n",
    "                       'eufastfd', \\\n",
    "                       'euffyday', \\\n",
    "                       'eufdsit', \\\n",
    "                       'eusnap', \\\n",
    "                       'eugenhth', \\\n",
    "                       'eugroshp', \\\n",
    "                       'euinclvl', \\\n",
    "                       'euincome2', \\\n",
    "                       'eumeat', \\\n",
    "                       'eumilk', \\\n",
    "                       'euprpmel', \\\n",
    "                       'eusoda', \\\n",
    "                       'eustores', \\\n",
    "                       'eustreason', \\\n",
    "                       'eutherm', \\\n",
    "                       'euwic']\n",
    "\n",
    "target_column = ['erbmi']\n",
    "\n",
    "\n",
    "def split_data(dataset):\n",
    "    import numpy as np\n",
    "    length = dataset.shape[0]\n",
    "    train_index_stop = int(length * 0.7)\n",
    "    permutation = np.random.RandomState(0).permutation(length)\n",
    "    \n",
    "    # Take just the values up to the train_index_stop\n",
    "    train_permutation = permutation[:train_index_stop]\n",
    "    # Take the values after the train_index_stop\n",
    "    test_permutation = permutation[train_index_stop:]\n",
    "\n",
    "    # Create the training and testing data\n",
    "    dataset_train = dataset[train_permutation]\n",
    "    dataset_test = dataset[test_permutation]\n",
    "    \n",
    "    return [dataset_train, dataset_test]\n",
    "\n",
    "def prepare_categorical_columns(file, columns):\n",
    "    import pandas as pd\n",
    "    from sklearn.preprocessing import LabelEncoder\n",
    "    \n",
    "    # Extract columns from file; convert to array\n",
    "    dataset = file[columns].values\n",
    "\n",
    "    # Apply LabelEncoder to multiple columns: https://stackoverflow.com/a/31939145\n",
    "    dataset = pd.DataFrame(dataset).apply(LabelEncoder().fit_transform).values\n",
    "\n",
    "    # OHE for multiple columns using pd.get_dummies: https://stackoverflow.com/a/44601764\n",
    "    # Another get_dummies example: http://queirozf.com/entries/one-hot-encoding-a-feature-on-a-pandas-dataframe-an-example\n",
    "    # OHE vs. get_dummies: https://medium.com/@guaisang/handling-categorical-features-get-dummies-onehotencoder-and-multicollinearity-f9d473a40417\n",
    "    dataset_df = pd.DataFrame(dataset, columns=columns)\n",
    "    dataset_dummies = pd.get_dummies(dataset_df, columns=columns)\n",
    "    dataset = dataset_dummies.values\n",
    "\n",
    "    # TODO: Determine if there are extraneous \n",
    "    # dummy columns we want to drop after this.\n",
    "    \n",
    "    # Split dataset\n",
    "    dataset_train, dataset_test = split_data(dataset)\n",
    "\n",
    "    return [dataset_train, dataset_test]\n",
    "\n",
    "def prepare_numerical_columns(file, columns):\n",
    "    # Extract columns from file; convert to array\n",
    "    dataset = file[columns].values\n",
    "    \n",
    "    # Split dataset\n",
    "    X_train, X_test = split_data(dataset)\n",
    "\n",
    "    # Scale values\n",
    "    from sklearn.preprocessing import StandardScaler\n",
    "    sc_X = StandardScaler()\n",
    "    X_train = sc_X.fit_transform(X_train)\n",
    "    X_test = sc_X.transform(X_test)\n",
    "    \n",
    "    return [X_train, X_test]\n",
    "\n",
    "# Define a function to return BMI class\n",
    "def get_bmi_class(bmi):\n",
    "    if bmi < 18.5:\n",
    "        return \"Excellent\"\n",
    "    elif bmi >= 18.5 and  bmi < 24.9:\n",
    "        return \"Normal Weight\"\n",
    "    elif bmi >= 24.9 and bmi < 29.9:\n",
    "        return \"Overweight\"\n",
    "    elif bmi > 30:\n",
    "        return \"Obese\"\n",
    "    else:\n",
    "        return \"Unknown\"\n",
    "# def get_bmi_class(bmi):\n",
    "#     if bmi < 18.5:\n",
    "#         return 0\n",
    "#     elif bmi >= 18.5 and  bmi < 24.9:\n",
    "#         return 1\n",
    "#     elif bmi >= 24.9 and bmi < 29.9:\n",
    "#         return 0\n",
    "#     elif bmi > 30:\n",
    "#         return 0\n",
    "#     else:\n",
    "#         return 0\n",
    "\n",
    "def prepare_target_column(file, column, return_column_type):\n",
    "    import numpy as np\n",
    "    import pandas as pd\n",
    "    dataset = file[column].values\n",
    "    \n",
    "    if (return_column_type == COLUMN_TYPES.CATEGORICAL):\n",
    "        dataset = np.asarray(pd.Series(get_bmi_class(bmi) for bmi in dataset))\n",
    "    \n",
    "    # Split dataset\n",
    "    dataset_train, dataset_test = split_data(dataset)\n",
    "\n",
    "    return [dataset_train, dataset_test]\n",
    "\n",
    "\n",
    "def prepare_data(file,\n",
    "                 categorical_columns,\n",
    "                 numerical_columns,\n",
    "                 target_column,\n",
    "                 target_column_return_type):\n",
    "    import pandas as pd\n",
    "    X_categorical_train, \\\n",
    "    X_categorical_test = prepare_categorical_columns(file, categorical_columns)\n",
    "\n",
    "    X_numerical_train, \\\n",
    "    X_numerical_test = \\\n",
    "    prepare_numerical_columns(file, numerical_columns)\n",
    "\n",
    "    X_train = pd.DataFrame(X_numerical_train) \\\n",
    "    .merge(pd.DataFrame(X_categorical_train),\n",
    "           how='outer',\n",
    "           left_index=True,\n",
    "           right_index=True) \\\n",
    "    .values\n",
    "    print('X_train shape:', X_train.shape)\n",
    "\n",
    "    X_test = pd.DataFrame(X_numerical_test) \\\n",
    "    .merge(pd.DataFrame(X_categorical_test),\n",
    "           how='outer',\n",
    "           left_index=True,\n",
    "           right_index=True) \\\n",
    "    .values\n",
    "    print('X_test shape:', X_test.shape)\n",
    "\n",
    "    y_train, \\\n",
    "    y_test = \\\n",
    "    prepare_target_column(file, target_column, target_column_return_type)\n",
    "\n",
    "    print('y_train shape:', y_train.shape)\n",
    "    print('y_test shape:', y_test.shape)\n",
    "    \n",
    "    return [X_train, X_test, y_train, y_test]\n",
    "\n",
    "X_train, X_test, \\\n",
    "y_train, y_test = \\\n",
    "prepare_data(file = ehresp_2014,\n",
    "             categorical_columns = categorical_columns,\n",
    "             numerical_columns = numerical_columns,\n",
    "             target_column = target_column,\n",
    "             target_column_return_type = COLUMN_TYPES.CATEGORICAL)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X_train.shape (7848, 142)\n",
      "[ True  True  True  True  True  True  True  True  True  True  True  True\n",
      "  True  True  True  True  True  True  True  True  True  True  True  True\n",
      "  True  True  True  True  True  True  True  True  True  True  True  True\n",
      "  True  True  True  True  True  True  True  True  True  True  True  True\n",
      "  True  True  True  True  True  True  True  True  True  True  True  True\n",
      "  True  True  True  True  True  True  True  True  True  True  True  True\n",
      "  True  True  True  True  True  True  True  True  True  True  True  True\n",
      "  True  True  True  True  True  True  True  True  True  True  True  True\n",
      "  True  True  True  True  True  True  True  True  True  True  True  True\n",
      "  True  True  True  True  True  True  True  True  True  True  True  True\n",
      "  True  True  True  True  True  True  True  True  True  True  True  True\n",
      " False  True  True  True  True  True  True  True  True  True]\n",
      "X_train.shape - after dropping `0` columns (7848, 141)\n",
      "X_test.shape - after dropping `0` columns (3364, 141)\n",
      "Before selction: X_train.shape (7848, 141)\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "Input X must be non-negative.",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m-------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                        Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-2-4cb090f47234>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     68\u001b[0m                                    \u001b[0mfirst_categorical_column_index\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m5\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     69\u001b[0m                                    \u001b[0mk_best\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 70\u001b[0;31m                                    score_function = chi2)\n\u001b[0m",
      "\u001b[0;32m<ipython-input-2-4cb090f47234>\u001b[0m in \u001b[0;36mselect_k_best_categorical_features\u001b[0;34m(X_train, y_train, X_test, first_categorical_column_index, k_best, score_function)\u001b[0m\n\u001b[1;32m     26\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     27\u001b[0m     \u001b[0mselect_k_best\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mSelectKBest\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mscore_func\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mscore_function\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mk\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mk_best\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 28\u001b[0;31m     \u001b[0mfit\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mselect_k_best\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfirst_categorical_column_index\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     29\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     30\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mtransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfit\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfirst_categorical_column_index\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.6/site-packages/sklearn/feature_selection/univariate_selection.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y)\u001b[0m\n\u001b[1;32m    347\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    348\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_check_params\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 349\u001b[0;31m         \u001b[0mscore_func_ret\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscore_func\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    350\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mscore_func_ret\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mlist\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtuple\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    351\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mscores_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpvalues_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mscore_func_ret\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/anaconda3/lib/python3.6/site-packages/sklearn/feature_selection/univariate_selection.py\u001b[0m in \u001b[0;36mchi2\u001b[0;34m(X, y)\u001b[0m\n\u001b[1;32m    213\u001b[0m     \u001b[0mX\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcheck_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maccept_sparse\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'csr'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    214\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0many\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdata\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0missparse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 215\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Input X must be non-negative.\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    216\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    217\u001b[0m     \u001b[0mY\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mLabelBinarizer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit_transform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: Input X must be non-negative."
     ]
    }
   ],
   "source": [
    "def drop_columns_with_only_zero_values(X_train, X_test):\n",
    "    # Drop columns where all values are `0`: https://stackoverflow.com/questions/34007632/how-to-remove-a-column-in-a-numpy-array/34008274\n",
    "    import numpy as np\n",
    "    print('X_train.shape', X_train.shape)\n",
    "    print(np.std(X_train, axis=0) != 0)\n",
    "    non_zero_columns_in_X_train = np.std(X_train, axis=0) != 0\n",
    "    X_train = X_train[:, non_zero_columns_in_X_train]\n",
    "    print('X_train.shape - after dropping `0` columns', X_train.shape)\n",
    "    X_test = X_test[:, non_zero_columns_in_X_train]\n",
    "    print('X_test.shape - after dropping `0` columns', X_test.shape)\n",
    "    return [X_train, X_test]\n",
    "\n",
    "X_train, X_test = drop_columns_with_only_zero_values(X_train = X_train,\n",
    "                                                     X_test = X_test)\n",
    "\n",
    "def select_k_best_categorical_features(X_train,\n",
    "                                       y_train,\n",
    "                                       X_test,\n",
    "                                       first_categorical_column_index,\n",
    "                                       k_best,\n",
    "                                       score_function):\n",
    "    from sklearn.feature_selection import SelectKBest\n",
    "    import numpy as np\n",
    "    \n",
    "    print('Before selction: X_train.shape', X_train.shape)\n",
    "    \n",
    "    select_k_best = SelectKBest(score_func = score_function, k = k_best)\n",
    "    fit = select_k_best.fit(X_train[:, first_categorical_column_index:], y_train)\n",
    "    \n",
    "    def transform(arr, fit, first_categorical_column_index):\n",
    "        arr_numerical = arr[:, :first_categorical_column_index]\n",
    "        arr_categorical = arr[:, first_categorical_column_index:]\n",
    "        features = fit.transform(arr_categorical)\n",
    "        return np.append(arr_numerical, arr_categorical, axis=1)\n",
    "    \n",
    "#     X_train_numerical = X_train[:, :first_categorical_column_index]\n",
    "#     train_features = fit.transform(X_train[:, first_categorical_column_index:])\n",
    "#     X_train = np.append(X_train_numerical, train_features, axis=1)\n",
    "    X_train = transform(arr = X_train,\n",
    "                        fit = fit,\n",
    "                        first_categorical_column_index = first_categorical_column_index)\n",
    "\n",
    "    print('train_features.shape', train_features.shape)\n",
    "    print('train_features:\\n', train_features)\n",
    "    \n",
    "    print('After selection: X_train.shape', X_train.shape)\n",
    "    print('After selection: X_train:\\n', X_train)\n",
    "\n",
    "#     X_test_numerical = X_test[:, :first_categorical_column_index]\n",
    "#     test_features = fit.transform(X_test[:, first_categorical_column_index:])\n",
    "#     X_test = np.append(X_test_numerical, test_features, axis=1)\n",
    "    X_test = transform(arr = X_test,\n",
    "                       fit = fit,\n",
    "                       first_categorical_column_index = first_categorical_column_index)\n",
    "    print('After selection: X_test.shape', X_test.shape)\n",
    "    print('After selection: X_test:\\n', X_test)\n",
    "    \n",
    "    return [X_train, X_test]\n",
    "\n",
    "\n",
    "# https://www.datacamp.com/community/tutorials/feature-selection-python\n",
    "# Note that `chi2` works _only_ for non-negative categorical data\n",
    "from sklearn.feature_selection import chi2\n",
    "\n",
    "select_k_best_categorical_features(X_train = X_train,\n",
    "                                   y_train = y_train,\n",
    "                                   X_test = X_test,\n",
    "                                   first_categorical_column_index = 5,\n",
    "                                   k_best = 10,\n",
    "                                   score_function = chi2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
